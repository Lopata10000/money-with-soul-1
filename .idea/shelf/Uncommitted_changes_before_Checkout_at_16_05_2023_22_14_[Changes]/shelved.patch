Index: src/main/java/com/fanta/moneywithsoul/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/fanta/moneywithsoul/UserController.java b/src/main/java/com/fanta/moneywithsoul/UserController.java
--- a/src/main/java/com/fanta/moneywithsoul/UserController.java	
+++ b/src/main/java/com/fanta/moneywithsoul/UserController.java	
@@ -2,32 +2,27 @@
 
 import static com.fanta.moneywithsoul.database.PoolConfig.dataSource;
 
+import com.fanta.moneywithsoul.entity.User;
+import com.fanta.moneywithsoul.service.UserService;
 import javafx.fxml.FXML;
 import javafx.scene.control.Alert;
-import javafx.scene.control.Button;
-import javafx.scene.control.ComboBox;
-import javafx.scene.control.Label;
-import javafx.scene.control.PasswordField;
+import javafx.scene.control.RadioButton;
 import javafx.scene.control.TableColumn;
 import javafx.scene.control.TableView;
 import javafx.scene.control.TextField;
+import javafx.scene.control.ToggleGroup;
 import javafx.scene.control.cell.PropertyValueFactory;
-
-import com.fanta.moneywithsoul.service.UserService;
-import com.fanta.moneywithsoul.entity.User;
+import javafx.scene.layout.VBox;
 
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.util.ArrayList;
 import java.util.List;
 
 public class UserController {
     @FXML
-    private TableView tableView;
-    @FXML
-    private Label resultLabel; // Додано поле для мітки результатів
+    private TableView<User> tableView;
     @FXML
     private TextField firstNameField;
     @FXML
@@ -35,114 +30,127 @@
     @FXML
     private TextField emailField;
     @FXML
-    private PasswordField passwordField;
+    private TextField passwordField;
     @FXML
     private TextField userStatusField;
     @FXML
-    private TextField userIdField;
+    private VBox container;
+
+    private ToggleGroup tableToggleGroup;
+    private UserService userService = new UserService();
+
     @FXML
-    private TextField searchUserField;
+    public void initialize() {
+        List<String> tableNames = List.of("users", "budgets", "transactions", "exchange_rates", "planning_costs", "costs", "earnings", "cost_categories", "earning_categories");
+
+        tableToggleGroup = new ToggleGroup();
+
+        for (String tableName : tableNames) {
+            RadioButton radioButton = new RadioButton(tableName);
+            radioButton.setToggleGroup(tableToggleGroup);
+            radioButton.setOnAction(event -> {
+                String selectedTableName = ((RadioButton) event.getSource()).getText();
+                updateTableView(selectedTableName);
+            });
+
+            container.getChildren().add(radioButton);
+        }
+    }
 
     @FXML
-    private Button getAllUsersButton;
-    private UserService userService = new UserService();
-
-    public UserController() {
-    }
-
-            // Отриму
-            @FXML
-            public void createUser () {
-                User user = userService.saveUser(
-                        firstNameField.getText(),
-                        lastNameField.getText(),
-                        emailField.getText(),
-                        passwordField.getText(),
-                        userStatusField.getText()
-                );
-                userService.save(user);
-            }
+    public void createUser() {
+//        User user = new User(
+//                firstNameField.getText(),
+//                lastNameField.getText(),
+//                emailField.getText(),
+//                passwordField.getText(),
+//                userStatusField.getText()
+//        );
+//        userService.saveUser(user);
+        showAlert("User created successfully!");
+        clearFields();
+    }
 
-            @FXML
-            public void updateUser () {
-                try {
-                    Long userId = Long.parseLong(userIdField.getText());
-                    User user = userService.updateUser(
-                            userId,
-                            firstNameField.getText(),
-                            lastNameField.getText(),
-                            emailField.getText(),
-                            passwordField.getText(),
-                            userStatusField.getText()
-                    );
-                    userService.update(userId, user);
-                } catch (NumberFormatException e) {
-                    // Введено неправильний формат числа
-                    showAlert("Неправильний формат числа для Id");
-                }
-            }
+    @FXML
+    public void updateUser() {
+        User selectedUser = tableView.getSelectionModel().getSelectedItem();
+//        if (selectedUser != null) {
+//            selectedUser.setUserId();
+//            selectedUser.setFirstName(firstNameField.getText());
+//            selectedUser.setLastName(lastNameField.getText());
+//            selectedUser.setEmail(emailField.getText());
+//            selectedUser.setPasswordHash(passwordField.getText());
+//            selectedUser.setUserStatus(userStatusField.getText());
+//
+//            userService.updateUser(selectedUser);
+//            showAlert("User updated successfully!");
+//            clearFields();
+//        } else {
+//            showAlert("Please select a user to update!");
+//        }
+    }
 
-            @FXML
-            public void deleteUser () {
-                try {
-                    Long userId = Long.parseLong(userIdField.getText());
-                    userService.delete(userId);
-                } catch (NumberFormatException e) {
-                    // Введено неправильний формат числа
-                    showAlert("Неправильний формат числа для Id");
-                }
-            }
-
-            @FXML
-            void searchUser () {
-                try {
-                    String userIdText = searchUserField.getText();
-                    if (userIdText.isEmpty()) {
-                        resultLabel.setText("Please enter a User ID to search");
-                        return;
-                    }
-
-                    Long userId = Long.parseLong(userIdText);
-                    User user = userService.getById(userId);
-                    if (user == null) {
-                        resultLabel.setText("User not found");
-                    } else {
-                        resultLabel.setText("User found: " + user);
-
-                        // Очистити таблицю перед додаванням нових даних
-                        tableView.getItems().clear();
-
-                        // Додати знайденого користувача до таблиці
-                        tableView.getItems().add(user);
-                    }
-                } catch (NumberFormatException e) {
-                    // Введено неправильний формат числа
-                    showAlert("Неправильний формат числа для Id");
-                }
-
-            }
+    @FXML
+    public void deleteUser() {
+        User selectedUser = tableView.getSelectionModel().getSelectedItem();
+        if (selectedUser != null) {
+            userService.delete(selectedUser.getUserId());
+            showAlert("User deleted successfully!");
+            clearFields();
+        } else {
+            showAlert("Please select a user to delete!");
+        }
+    }
 
-            private void showAlert (String message){
-                Alert alert = new Alert(Alert.AlertType.ERROR);
-                alert.setTitle("Помилка");
-                alert.setHeaderText(null);
-                alert.setContentText(message);
-                alert.showAndWait();
-            }
+    private void showAlert(String message) {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle("Information");
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
 
-            @FXML
-            void getAllUsers () {
-                List<User> users = userService.getAll();
-                if (users.isEmpty()) {
-                    resultLabel.setText("No users found");
-                } else {
-                    resultLabel.setText("Found " + users.size() + " users");
+    private void clearFields() {
+        firstNameField.clear();
+        lastNameField.clear();
+        emailField.clear();
+        passwordField.clear();
+        userStatusField.clear();
+    }
+
+    private void updateTableView(String tableName) {
+        tableView.getColumns().clear(); // Clear columns
 
-                    // Очистити таблицю перед додаванням нових даних
-                    tableView.getItems().clear();
+        try (Connection connection = dataSource.getConnection()) {
+            DatabaseMetaData metaData = connection.getMetaData();
+            ResultSet columns = metaData.getColumns(null, null, tableName, null);
+            while (columns.next()) {
+                String columnName = columns.getString("COLUMN_NAME");
+                TableColumn<User, String> column = new TableColumn<>(columnName);
 
-                    // Додати користувачів до таблиці
-                    tableView.getItems().addAll(users);
-                }
-            }
-        }
\ No newline at end of file
+                // Get the corresponding variable name in the User class
+                String variableName = convertColumnNameToVariableName(columnName);
+
+                // Set the PropertyValueFactory using the variable name
+                column.setCellValueFactory(new PropertyValueFactory<>(variableName));
+                tableView.getColumns().add(column);
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private String convertColumnNameToVariableName(String columnName) {
+        // Split the column name by "_"
+        String[] words = columnName.split("_");
+        StringBuilder variableName = new StringBuilder();
+
+        for (String word : words) {
+            // Capitalize the first letter
+            String capitalizedWord = word.substring(0, 1).toUpperCase() + word.substring(1);
+            variableName.append(capitalizedWord);
+        }
+
+        return variableName.toString();
+    }
+}
Index: src/main/java/com/fanta/moneywithsoul/HelloApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/fanta/moneywithsoul/HelloApplication.java b/src/main/java/com/fanta/moneywithsoul/HelloApplication.java
--- a/src/main/java/com/fanta/moneywithsoul/HelloApplication.java	
+++ b/src/main/java/com/fanta/moneywithsoul/HelloApplication.java	
@@ -19,24 +19,18 @@
 import static com.fanta.moneywithsoul.database.PoolConfig.dataSource;
 
 public class HelloApplication extends Application {
-    private ToggleGroup tableToggleGroup;
-    private TableView<User> tableView;
+    private UserController controller; // Додайте поле контролера
+
 
     public void start(Stage primaryStage) throws Exception {
         FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/fanta/money-with-soul/hello-view.fxml"));
         VBox vbox = loader.load();
-
         UserController controller = loader.getController();
-        tableView = new TableView<>(); // Оголошуємо TableView для користувачів
-
-        List<String> tableNames = Arrays.asList("users", "budgets", "transactions", "exchange_rates", "planning_costs", "costs", "earnings", "cost_categories", "earning_categories"); // Назви таблиць
-
-        VBox radioButtonsContainer = createRadioButtonsContainer(tableNames); // Створюємо контейнер для RadioButton
-        vbox.getChildren().add(radioButtonsContainer);
-        vbox.getChildren().add(tableView);
+        controller.initialize();
 
         Scene scene = new Scene(vbox);
         primaryStage.setScene(scene);
+        primaryStage.setTitle("Money With Soul");
         primaryStage.show();
     }
 
@@ -44,60 +38,5 @@
         launch(args);
     }
 
-    private VBox createRadioButtonsContainer(List<String> tableNames) {
-        VBox container = new VBox();
-        tableToggleGroup = new ToggleGroup();
-
-        for (String tableName : tableNames) {
-            RadioButton radioButton = new RadioButton(tableName);
-            radioButton.setToggleGroup(tableToggleGroup);
-            radioButton.setOnAction(event -> {
-                // При зміні вибраної таблиці оновлюємо TableView
-                String selectedTableName = ((RadioButton) event.getSource()).getText();
-                updateTableView(selectedTableName);
-            });
-
-            container.getChildren().add(radioButton);
-        }
-
-        return container;
-    }
-
-    private void updateTableView(String tableName) {
-        tableView.getColumns().clear(); // Очищаємо стовпці
-
-        try (Connection connection = dataSource.getConnection()) {
-            DatabaseMetaData metaData = connection.getMetaData();
-            ResultSet columns = metaData.getColumns(null, null, tableName, null);
-            while (columns.next()) {
-                String columnName = columns.getString("COLUMN_NAME");
-
-                TableColumn<User, String> column = new TableColumn<>(columnName);
-
-                // Отримуємо відповідну назву змінної у класі User
-                String variableName = convertColumnNameToVariableName(columnName);
-
-                // Встановлюємо PropertyValueFactory з використанням назви змінної
-                column.setCellValueFactory(new PropertyValueFactory<>(variableName));
-                tableView.getColumns().add(column);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private String convertColumnNameToVariableName(String columnName) {
-        // Розділяємо назву стовпця по символу "_"
-        String[] words = columnName.split("_");
-        StringBuilder variableName = new StringBuilder();
-
-        for (String word : words) {
-            // Замінюємо першу літеру на заголовну
-            String capitalizedWord = word.substring(0, 1).toUpperCase() + word.substring(1);
-            variableName.append(capitalizedWord);
-        }
-
-        return variableName.toString();
-    }
 }
 
Index: src/main/resources/com/fanta/money-with-soul/hello-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/fanta/money-with-soul/hello-view.fxml b/src/main/resources/com/fanta/money-with-soul/hello-view.fxml
--- a/src/main/resources/com/fanta/money-with-soul/hello-view.fxml	
+++ b/src/main/resources/com/fanta/money-with-soul/hello-view.fxml	
@@ -1,23 +1,26 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 <?import javafx.scene.control.Button?>
-<?import javafx.scene.control.ComboBox?>
 <?import javafx.scene.control.Label?>
-<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TableView?>
 <?import javafx.scene.control.TextField?>
 <?import javafx.scene.layout.VBox?>
+<?import javafx.scene.control.TextField?>
 
-<VBox xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.fanta.moneywithsoul.UserController">
-    <TextField fx:id="firstNameField" promptText="First Name" />
-    <TextField fx:id="lastNameField" promptText="Last Name" />
-    <TextField fx:id="emailField" promptText="Email" />
-    <PasswordField fx:id="passwordField" promptText="Password" />
-    <TextField fx:id="userStatusField" promptText="User Status" />
-    <TextField fx:id="userIdField" promptText="User ID" />
-    <TextField fx:id="searchUserField" promptText="Search User ID" />
-    <Button fx:id="getAllUsersButton" text="Get All Users" onAction="#getAllUsers" />
-    <Button text="Create User" onAction="#createUser" />
-    <Button text="Update User" onAction="#updateUser" />
-    <Button text="Delete User" onAction="#deleteUser" />
-    <Label fx:id="resultLabel" />
-</VBox>
+
+<VBox xmlns:fx="http://javafx.com/fxml" fx:id="container" fx:controller="com.fanta.moneywithsoul.UserController">
+    <Label text="First Name"/>
+    <TextField fx:id="firstNameField"/>
+    <Label text="Last Name"/>
+    <TextField fx:id="lastNameField"/>
+    <Label text="Email"/>
+    <TextField fx:id="emailField"/>
+    <Label text="Password"/>
+    <TextField fx:id="passwordField"/>
+    <Label text="User Status"/>
+    <TextField fx:id="userStatusField"/>
+    <Button text="Create User" onAction="#createUser"/>
+    <Button text="Update User" onAction="#updateUser"/>
+    <Button text="Delete User" onAction="#deleteUser"/>
+    <TableView fx:id="tableView"/>
+</VBox>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,16 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="34f90c5d-cb74-4d91-bf30-e25079bc3ee0" name="Changes" comment="Dao">
-      <change afterPath="$PROJECT_DIR$/src/main/resources/db/migration/V1__seed_data.sql" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sqldialects.xml" beforeDir="false" />
+    <list default="true" id="34f90c5d-cb74-4d91-bf30-e25079bc3ee0" name="Changes" comment="Simple Interface">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/HelloApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/HelloApplication.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/Hibernate.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/database/Hibernate.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/Logerr.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/UserController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/dao/BaseDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/fanta/moneywithsoul/dao/BaseDAO.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/module-info.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/resources/com/fanta/money-with-soul/hello-view.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/com/fanta/money-with-soul/hello-view.fxml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -247,7 +241,14 @@
       <option name="project" value="LOCAL" />
       <updated>1684243604149</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="Simple Interface">
+      <created>1684260772703</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1684260772703</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
