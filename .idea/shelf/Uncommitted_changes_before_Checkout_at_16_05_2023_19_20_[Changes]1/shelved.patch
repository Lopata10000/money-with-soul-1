Index: src/main/java/com/fanta/service/EarningService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/EarningService.java b/src/main/java/com/fanta/service/EarningService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/EarningService.java	
+++ /dev/null	
@@ -1,40 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.EarningDAO;
-import com.fanta.entity.Earning;
-
-import java.util.List;
-
-public class EarningService implements Service<Earning> {
-    private EarningDAO earningDAO;
-
-    public EarningService() {
-        earningDAO = new EarningDAO();
-    }
-
-    @Override
-    public Earning getById(Long earningId) {
-        return earningDAO.findById(earningId);
-    }
-
-    @Override
-    public List<Earning> getAll() {
-        return earningDAO.findAll();
-    }
-
-    @Override
-    public void save(Earning earning) {
-        earningDAO.save(earning);
-    }
-
-    @Override
-    public void update(Earning earning) {
-        earningDAO.update(earning);
-    }
-
-    @Override
-    public void delete(Earning earning) {
-        earningDAO.delete(earning);
-    }
-}
-
Index: src/main/java/com/fanta/entity/Budget.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/Budget.java b/src/main/java/com/fanta/entity/Budget.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/Budget.java	
+++ /dev/null	
@@ -1,105 +0,0 @@
-package com.fanta.entity;
-
-import java.math.BigDecimal;
-import java.sql.Date;
-import java.time.LocalDate;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "budgets")
-public class Budget {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "budget_id")
-    private Long budgetId;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "user_id")
-    private User user;
-
-    @Column(name = "name")
-    private String name;
-
-    @Column(name = "start_date")
-    private LocalDate startDate;
-
-    @Column(name = "end_date")
-    private LocalDate endDate;
-
-    @Column(name = "amount")
-    private BigDecimal amount;
-
-    public Budget(
-            long budget_id,
-            User user_id,
-            String name,
-            Date start_date,
-            Date end_date,
-            BigDecimal amount) {
-        this.budgetId = budgetId;
-        this.user = user;
-        this.name = name;
-        this.startDate = start_date.toLocalDate();
-        this.endDate = end_date.toLocalDate();
-        this.amount = amount;
-    }
-
-    public Budget() {}
-
-    public Long getBudgetId() {
-        return budgetId;
-    }
-
-    public void setBudgetId(Long budgetId) {
-        this.budgetId = budgetId;
-    }
-
-    public User getUser() {
-        return user;
-    }
-
-    public void setUser(User user) {
-        this.user = user;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public LocalDate getStartDate() {
-        return startDate;
-    }
-
-    public void setStartDate(LocalDate startDate) {
-        this.startDate = startDate;
-    }
-
-    public LocalDate getEndDate() {
-        return endDate;
-    }
-
-    public void setEndDate(LocalDate endDate) {
-        this.endDate = endDate;
-    }
-
-    public BigDecimal getAmount() {
-        return amount;
-    }
-
-    public void setAmount(BigDecimal amount) {
-        this.amount = amount;
-    }
-}
Index: src/main/java/com/fanta/dao/EarningDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/EarningDAO.java b/src/main/java/com/fanta/dao/EarningDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/EarningDAO.java	
+++ /dev/null	
@@ -1,128 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.Earning;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class EarningDAO extends BaseDAO<Earning> implements DAO<Earning> {
-
-    @Override
-    public Earning findById(Long earningId) {
-        Earning earning = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM earnings WHERE earning_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, earningId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                earning =
-                        new Earning(
-                                resultSet.getLong("earning_id"),
-                                new UserDAO().findById(resultSet.getLong("user_id")),
-                                new EarningCategoryDAO()
-                                        .findById(resultSet.getLong("earning_category_id")),
-                                new TransactionDAO().findById(resultSet.getLong("transaction_id")),
-                                new BudgetDAO().findById(resultSet.getLong("budget_id")),
-                                resultSet.getTimestamp("earning_date"),
-                                resultSet.getBigDecimal("earning_amount"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return earning;
-    }
-
-    @Override
-    public List<Earning> findAll() {
-        List<Earning> earnings = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement =
-                        connection.prepareStatement("SELECT * FROM earnings")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                Earning earning =
-                        new Earning(
-                                resultSet.getLong("earning_id"),
-                                new UserDAO().findById(resultSet.getLong("user_id")),
-                                new EarningCategoryDAO()
-                                        .findById(resultSet.getLong("earning_category_id")),
-                                new TransactionDAO().findById(resultSet.getLong("transaction_id")),
-                                new BudgetDAO().findById(resultSet.getLong("budget_id")),
-                                resultSet.getTimestamp("earning_date"),
-                                resultSet.getBigDecimal("earning_amount"));
-                earnings.add(earning);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return earnings;
-    }
-
-    @Override
-    public void save(Earning earning) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO earnings (user_id, earning_category_id,"
-                                                + " transaction_id, budget_id, earning_date,"
-                                                + " earning_amount) VALUES (?, ?, ?, ?, ?, ?)")) {
-                        statement.setLong(1, earning.getUser().getUserId());
-                        statement.setLong(2, earning.getEarningCategory().getEarningCategoryId());
-                        statement.setLong(3, earning.getTransaction().getTransactionId());
-                        statement.setLong(4, earning.getBudget().getBudgetId());
-                        statement.setTimestamp(5, earning.getEarningDate());
-                        statement.setBigDecimal(6, earning.getEarningAmount());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(Earning earning) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE earnings SET user_id = ?, earning_category_id ="
-                                                    + " ?, transaction_id = ?, budget_id = ?,"
-                                                    + " earning_date = ?, earning_amount = ? WHERE"
-                                                    + " earning_id = ?")) {
-                        statement.setLong(1, earning.getUser().getUserId());
-                        statement.setLong(2, earning.getEarningCategory().getEarningCategoryId());
-                        statement.setLong(3, earning.getTransaction().getTransactionId());
-                        statement.setLong(4, earning.getBudget().getBudgetId());
-                        statement.setTimestamp(5, earning.getEarningDate());
-                        statement.setBigDecimal(6, earning.getEarningAmount());
-                        statement.setLong(7, earning.getEarningId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(Earning earning) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM earnings WHERE earning_id = ?")) {
-                        statement.setLong(1, earning.getEarningId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/java/com/fanta/service/PlanningCostService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/PlanningCostService.java b/src/main/java/com/fanta/service/PlanningCostService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/PlanningCostService.java	
+++ /dev/null	
@@ -1,35 +0,0 @@
-package com.fanta.service;
-
-
-import com.fanta.dao.PlanningCostDAO;
-import com.fanta.entity.PlanningCost;
-
-import java.util.List;
-
-public class PlanningCostService implements Service<PlanningCost> {
-    private PlanningCostDAO planningCostDAO;
-
-    public PlanningCostService() {
-        planningCostDAO = new PlanningCostDAO();
-    }
-    @Override
-    public PlanningCost getById(Long planningCostId) {
-        return planningCostDAO.findById(planningCostId);
-    }
-    @Override
-    public List<PlanningCost> getAll() {
-        return planningCostDAO.findAll();
-    }
-    @Override
-    public void save(PlanningCost planningCost) {
-        planningCostDAO.save(planningCost);
-    }
-    @Override
-    public void update(PlanningCost planningCost) {
-        planningCostDAO.update(planningCost);
-    }
-    @Override
-    public void delete(PlanningCost planningCost) {
-        planningCostDAO.delete(planningCost);
-    }
-}
Index: src/main/java/com/fanta/entity/ExchangeRate.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/ExchangeRate.java b/src/main/java/com/fanta/entity/ExchangeRate.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/ExchangeRate.java	
+++ /dev/null	
@@ -1,49 +0,0 @@
-package com.fanta.entity;
-
-import java.math.BigDecimal;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "exchange_rates")
-public class ExchangeRate {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "exchange_id")
-    private Long exchangeId;
-
-    @Column(name = "name_currency")
-    private String nameCurrency;
-
-    @Column(name = "rate")
-    private BigDecimal rate;
-
-    public Long getExchangeId() {
-        return exchangeId;
-    }
-
-    public void setExchangeId(Long exchangeId) {
-        this.exchangeId = exchangeId;
-    }
-
-    public String getNameCurrency() {
-        return nameCurrency;
-    }
-
-    public void setNameCurrency(String nameCurrency) {
-        this.nameCurrency = nameCurrency;
-    }
-
-    public BigDecimal getRate() {
-        return rate;
-    }
-
-    public void setRate(BigDecimal rate) {
-        this.rate = rate;
-    }
-}
Index: src/main/java/com/fanta/entity/Cost.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/Cost.java b/src/main/java/com/fanta/entity/Cost.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/Cost.java	
+++ /dev/null	
@@ -1,114 +0,0 @@
-package com.fanta.entity;
-
-import java.math.BigDecimal;
-import java.sql.Timestamp;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "costs")
-public class Cost {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "cost_id")
-    private Long costId;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "user_id")
-    private User user;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "cost_category_id")
-    private CostCategory costCategory;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "budget_id")
-    private Budget budget;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "transaction_id")
-    private Transaction transaction;
-
-    @Column(name = "cost_date")
-    private Timestamp costDate;
-
-    @Column(name = "cost_amount")
-    private BigDecimal costAmount;
-
-    @Column(name = "cost_description")
-    private String costDescription;
-
-    public Cost() {}
-
-    public Long getCostId() {
-        return costId;
-    }
-
-    public void setCostId(Long costId) {
-        this.costId = costId;
-    }
-
-    public User getUser() {
-        return user;
-    }
-
-    public void setUser(User user) {
-        this.user = user;
-    }
-
-    public CostCategory getCostCategory() {
-        return costCategory;
-    }
-
-    public void setCostCategory(CostCategory costCategory) {
-        this.costCategory = costCategory;
-    }
-
-    public Budget getBudget() {
-        return budget;
-    }
-
-    public void setBudget(Budget budget) {
-        this.budget = budget;
-    }
-
-    public Transaction getTransaction() {
-        return transaction;
-    }
-
-    public void setTransaction(Transaction transaction) {
-        this.transaction = transaction;
-    }
-
-    public Timestamp getCostDate() {
-        return costDate;
-    }
-
-    public void setCostDate(Timestamp costDate) {
-        this.costDate = costDate;
-    }
-
-    public BigDecimal getCostAmount() {
-        return costAmount;
-    }
-
-    public void setCostAmount(BigDecimal costAmount) {
-        this.costAmount = costAmount;
-    }
-
-    public String getCostDescription() {
-        return costDescription;
-    }
-
-    public void setCostDescription(String costDescription) {
-        this.costDescription = costDescription;
-    }
-}
Index: src/main/java/com/fanta/service/EarningCategoryService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/EarningCategoryService.java b/src/main/java/com/fanta/service/EarningCategoryService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/EarningCategoryService.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.EarningCategoryDAO;
-import com.fanta.entity.EarningCategory;
-
-import java.util.List;
-
-public class EarningCategoryService implements Service<EarningCategory> {
-    private EarningCategoryDAO earningCategoryDAO;
-
-    public EarningCategoryService() {
-        earningCategoryDAO = new EarningCategoryDAO();
-    }
-
-    @Override
-    public EarningCategory getById(Long earningCategoryId) {
-        return earningCategoryDAO.findById(earningCategoryId);
-    }
-
-    @Override
-    public List<EarningCategory> getAll() {
-        return earningCategoryDAO.findAll();
-    }
-
-    @Override
-    public void save(EarningCategory earningCategory) {
-        earningCategoryDAO.save(earningCategory);
-    }
-
-    @Override
-    public void update(EarningCategory earningCategory) {
-        earningCategoryDAO.update(earningCategory);
-    }
-
-    @Override
-    public void delete(EarningCategory earningCategory) {
-        earningCategoryDAO.delete(earningCategory);
-    }
-}
Index: src/main/java/com/fanta/service/CostService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/CostService.java b/src/main/java/com/fanta/service/CostService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/CostService.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.CostDAO;
-import com.fanta.entity.Cost;
-
-import java.util.List;
-
-public class CostService implements Service<Cost> {
-    private CostDAO costDAO;
-
-    public CostService() {
-        costDAO = new CostDAO();
-    }
-
-    @Override
-    public Cost getById(Long costId) {
-        return costDAO.findById(costId);
-    }
-
-    @Override
-    public List<Cost> getAll() {
-        return costDAO.findAll();
-    }
-
-    @Override
-    public void save(Cost cost) {
-        costDAO.save(cost);
-    }
-
-    @Override
-    public void update(Cost cost) {
-        costDAO.update(cost);
-    }
-
-    @Override
-    public void delete(Cost cost) {
-        costDAO.delete(cost);
-    }
-}
Index: src/main/java/com/fanta/entity/PlanningCost.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/PlanningCost.java b/src/main/java/com/fanta/entity/PlanningCost.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/PlanningCost.java	
+++ /dev/null	
@@ -1,93 +0,0 @@
-package com.fanta.entity;
-
-import java.math.BigDecimal;
-import java.sql.Timestamp;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "planning_costs")
-public class PlanningCost {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "planning_cost_id")
-    private Long planningCostId;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "user_id")
-    private User user;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "cost_category_id")
-    private CostCategory costCategory;
-
-    @Column(name = "planning_cost_date")
-    private Timestamp planningCostDate;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "budget_id")
-    private Budget budget;
-
-    @Column(name = "planned_amount")
-    private BigDecimal plannedAmount;
-
-    // getters and setters
-
-    public Long getPlanningCostId() {
-        return planningCostId;
-    }
-
-    public void setPlanningCostId(Long planningCostId) {
-        this.planningCostId = planningCostId;
-    }
-
-    public User getUser() {
-        return user;
-    }
-
-    public void setUser(User user) {
-        this.user = user;
-    }
-
-    public CostCategory getCostCategory() {
-        return costCategory;
-    }
-
-    public void setCostCategory(CostCategory costCategory) {
-        this.costCategory = costCategory;
-    }
-
-    public java.sql.Timestamp getPlanningCostDate() {
-        return planningCostDate;
-    }
-
-    public void setPlanningCostDate(java.sql.Timestamp planningCostDate) {
-        this.planningCostDate = planningCostDate;
-    }
-
-    public Budget getBudget() {
-        return budget;
-    }
-
-    public void setBudget(Budget budget) {
-        this.budget = budget;
-    }
-
-    public BigDecimal getPlannedAmount() {
-        return plannedAmount;
-    }
-
-    public void setPlannedAmount(BigDecimal plannedAmount) {
-        this.plannedAmount = plannedAmount;
-    }
-
-}
Index: src/main/java/com/fanta/service/Service.java
===================================================================
diff --git a/src/main/java/com/fanta/service/Service.java b/src/main/java/com/fanta/service/Service.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/Service.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.fanta.service;
-
-import java.util.List;
-
-public interface Service<T> {
-    T getById(Long id);
-    List<T> getAll();
-    void save(T entity);
-    void update(T entity);
-    void delete(T entity);
-}
-
Index: src/main/java/com/fanta/service/ExchangeRateService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/ExchangeRateService.java b/src/main/java/com/fanta/service/ExchangeRateService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/ExchangeRateService.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.ExchangeRateDAO;
-import com.fanta.entity.ExchangeRate;
-
-import java.util.List;
-
-public class ExchangeRateService implements Service<ExchangeRate> {
-    private ExchangeRateDAO exchangeRateDAO;
-
-    public ExchangeRateService() {
-        exchangeRateDAO = new ExchangeRateDAO();
-    }
-
-    @Override
-    public ExchangeRate getById(Long exchangeId) {
-        return exchangeRateDAO.findById(exchangeId);
-    }
-
-    @Override
-    public List<ExchangeRate> getAll() {
-        return exchangeRateDAO.findAll();
-    }
-
-    @Override
-    public void save(ExchangeRate exchangeRate) {
-        exchangeRateDAO.save(exchangeRate);
-    }
-
-    @Override
-    public void update(ExchangeRate exchangeRate) {
-        exchangeRateDAO.update(exchangeRate);
-    }
-
-    @Override
-    public void delete(ExchangeRate exchangeRate) {
-        exchangeRateDAO.delete(exchangeRate);
-    }
-}
Index: src/main/java/com/fanta/dao/PlanningCostDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/PlanningCostDAO.java b/src/main/java/com/fanta/dao/PlanningCostDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/PlanningCostDAO.java	
+++ /dev/null	
@@ -1,122 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.PlanningCost;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import java.sql.Timestamp;
-
-
-public class PlanningCostDAO extends BaseDAO<PlanningCost> implements DAO<PlanningCost> {
-
-    private UserDAO userDAO;
-    private CostCategoryDAO costCategoryDAO;
-    private BudgetDAO budgetDAO;
-
-    public PlanningCostDAO() {
-        userDAO = new UserDAO();
-        costCategoryDAO = new CostCategoryDAO();
-        budgetDAO = new BudgetDAO();
-    }
-
-    @Override
-    public PlanningCost findById(Long planningCostId) {
-        PlanningCost planningCost = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM planning_costs WHERE planning_cost_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, planningCostId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                planningCost = new PlanningCost();
-                planningCost.setPlanningCostId(resultSet.getLong("planning_cost_id"));
-                planningCost.setUser(userDAO.findById(resultSet.getLong("user_id")));
-                planningCost.setCostCategory(costCategoryDAO.findById(resultSet.getLong("cost_category_id")));
-                planningCost.setPlanningCostDate(resultSet.getTimestamp("planning_cost_date"));
-                planningCost.setBudget(budgetDAO.findById(resultSet.getLong("budget_id")));
-                planningCost.setPlannedAmount(resultSet.getBigDecimal("planned_amount"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return planningCost;
-    }
-
-    @Override
-    public List<PlanningCost> findAll() {
-        List<PlanningCost> planningCosts = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-             PreparedStatement statement = connection.prepareStatement("SELECT * FROM planning_costs")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                PlanningCost planningCost = new PlanningCost();
-                planningCost.setPlanningCostId(resultSet.getLong("planning_cost_id"));
-                planningCost.setUser(userDAO.findById(resultSet.getLong("user_id")));
-                planningCost.setCostCategory(costCategoryDAO.findById(resultSet.getLong("cost_category_id")));
-                planningCost.setPlanningCostDate(resultSet.getTimestamp("planning_cost_date"));
-                planningCost.setBudget(budgetDAO.findById(resultSet.getLong("budget_id")));
-                planningCost.setPlannedAmount(resultSet.getBigDecimal("planned_amount"));
-                planningCosts.add(planningCost);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return planningCosts;
-    }
-
-    @Override
-    public void save(PlanningCost planningCost) {
-        executeWithTransaction(() -> {
-            try (Connection connection = dataSource.getConnection();
-                 PreparedStatement statement = connection.prepareStatement(
-                         "INSERT INTO planning_costs (user_id, cost_category_id, planning_cost_date, budget_id, planned_amount) VALUES (?, ?, ?, ?, ?)")) {
-                statement.setLong(1, planningCost.getUser().getUserId());
-                statement.setLong(2, planningCost.getCostCategory().getCostCategoryId());
-                statement.setTimestamp(3, planningCost.getPlanningCostDate());
-                statement.setLong(4, planningCost.getBudget().getBudgetId());
-                statement.setBigDecimal(5, planningCost.getPlannedAmount());
-                statement.executeUpdate();
-            } catch (SQLException e) {
-                throw new RuntimeException(e);
-            }
-        });
-    }
-
-    @Override
-    public void update(PlanningCost planningCost)
-    {
-    executeWithTransaction(() -> {
-        try (Connection connection = dataSource.getConnection();
-             PreparedStatement statement = connection.prepareStatement(
-                     "UPDATE planning_costs SET user_id = ?, cost_category_id = ?, planning_cost_date = ?, budget_id = ?, planned_amount = ? WHERE planning_cost_id = ?")) {
-            statement.setLong(1, planningCost.getUser().getUserId());
-            statement.setLong(2, planningCost.getCostCategory().getCostCategoryId());
-            statement.setTimestamp(3, planningCost.getPlanningCostDate());
-            statement.setLong(4, planningCost.getBudget().getBudgetId());
-            statement.setBigDecimal(5, planningCost.getPlannedAmount());
-            statement.setLong(6, planningCost.getPlanningCostId());
-            statement.executeUpdate();
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-    });
-}
-
-    @Override
-    public void delete(PlanningCost planningCost) {
-        executeWithTransaction(() -> {
-            try (Connection connection = dataSource.getConnection();
-                 PreparedStatement statement = connection.prepareStatement(
-                         "DELETE FROM planning_costs WHERE planning_cost_id = ?")) {
-                statement.setLong(1, planningCost.getPlanningCostId());
-                statement.executeUpdate();
-            } catch (SQLException e) {
-                throw new RuntimeException(e);
-            }
-        });
-    }
-}
-
Index: src/main/java/com/fanta/service/UserService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/UserService.java b/src/main/java/com/fanta/service/UserService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/UserService.java	
+++ /dev/null	
@@ -1,40 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.UserDAO;
-import com.fanta.entity.User;
-
-import java.util.List;
-
-public class UserService implements Service<User> {
-    private UserDAO userDAO;
-
-    public UserService() {
-        userDAO = new UserDAO();
-    }
-
-    @Override
-    public User getById(Long userId) {
-        return userDAO.findById(userId);
-    }
-
-    @Override
-    public List<User> getAll() {
-        return userDAO.findAll();
-    }
-
-    @Override
-    public void save(User user) {
-        userDAO.save(user);
-    }
-
-    @Override
-    public void update(User user) {
-        userDAO.update(user);
-    }
-
-    @Override
-    public void delete(User user) {
-        userDAO.delete(user);
-    }
-}
-
Index: src/main/java/com/fanta/service/CostCategoryService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/CostCategoryService.java b/src/main/java/com/fanta/service/CostCategoryService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/CostCategoryService.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.CostCategoryDAO;
-import com.fanta.entity.CostCategory;
-
-import java.util.List;
-
-public class CostCategoryService implements Service<CostCategory> {
-    private CostCategoryDAO costCategoryDAO;
-
-    public CostCategoryService() {
-        costCategoryDAO = new CostCategoryDAO();
-    }
-
-    @Override
-    public CostCategory getById(Long costCategoryId) {
-        return costCategoryDAO.findById(costCategoryId);
-    }
-
-    @Override
-    public List<CostCategory> getAll() {
-        return costCategoryDAO.findAll();
-    }
-
-    @Override
-    public void save(CostCategory costCategory) {
-        costCategoryDAO.save(costCategory);
-    }
-
-    @Override
-    public void update(CostCategory costCategory) {
-        costCategoryDAO.update(costCategory);
-    }
-
-    @Override
-    public void delete(CostCategory costCategory) {
-        costCategoryDAO.delete(costCategory);
-    }
-}
Index: src/main/java/com/fanta/service/BudgetService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/BudgetService.java b/src/main/java/com/fanta/service/BudgetService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/BudgetService.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.BudgetDAO;
-import com.fanta.entity.Budget;
-
-import java.util.List;
-
-public class BudgetService implements Service<Budget> {
-    private BudgetDAO budgetDAO;
-
-    public BudgetService() {
-        budgetDAO = new BudgetDAO();
-    }
-
-    @Override
-    public Budget getById(Long budgetId) {
-        return budgetDAO.findById(budgetId);
-    }
-
-    @Override
-    public List<Budget> getAll() {
-        return budgetDAO.findAll();
-    }
-
-    @Override
-    public void save(Budget budget) {
-        budgetDAO.save(budget);
-    }
-
-    @Override
-    public void update(Budget budget) {
-        budgetDAO.update(budget);
-    }
-
-    @Override
-    public void delete(Budget budget) {
-        budgetDAO.delete(budget);
-    }
-}
Index: src/main/java/com/fanta/database/DataBaseConfig.java
===================================================================
diff --git a/src/main/java/com/fanta/database/DataBaseConfig.java b/src/main/java/com/fanta/database/DataBaseConfig.java
deleted file mode 100644
--- a/src/main/java/com/fanta/database/DataBaseConfig.java	
+++ /dev/null	
@@ -1,7 +0,0 @@
-package com.fanta.database;
-
-public interface DataBaseConfig {
-    String url = "jdbc:postgresql://localhost:5432/money-with-soul";
-    String user = "postgres";
-    String password = "45435";
-}
Index: src/main/java/com/fanta/dao/BudgetDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/BudgetDAO.java b/src/main/java/com/fanta/dao/BudgetDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/BudgetDAO.java	
+++ /dev/null	
@@ -1,120 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.Budget;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class BudgetDAO extends BaseDAO<Budget> implements DAO<Budget> {
-
-    @Override
-    public Budget findById(Long budgetId) {
-        Budget budget = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM budgets WHERE budget_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, budgetId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                budget =
-                        new Budget(
-                                resultSet.getLong("budget_id"),
-                                new UserDAO().findById(resultSet.getLong("user_id")),
-                                resultSet.getString("name"),
-                                resultSet.getDate("start_date"),
-                                resultSet.getDate("end_date"),
-                                resultSet.getBigDecimal("amount"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return budget;
-    }
-
-    @Override
-    public List<Budget> findAll() {
-        List<Budget> budgets = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement =
-                        connection.prepareStatement("SELECT * FROM budgets")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                Budget budget =
-                        new Budget(
-                                resultSet.getLong("budget_id"),
-                                new UserDAO().findById(resultSet.getLong("user_id")),
-                                resultSet.getString("name"),
-                                resultSet.getDate("start_date"),
-                                resultSet.getDate("end_date"),
-                                resultSet.getBigDecimal("amount"));
-                budgets.add(budget);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return budgets;
-    }
-
-    @Override
-    public void save(Budget budget) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO budgets (user_id, name, start_date,"
-                                                + " end_date, amount) VALUES (?, ?, ?, ?, ?)")) {
-                        statement.setLong(1, budget.getUser().getUserId());
-                        statement.setString(2, budget.getName());
-                        statement.setDate(3, java.sql.Date.valueOf(budget.getStartDate()));
-                        statement.setDate(4, java.sql.Date.valueOf(budget.getEndDate()));
-                        statement.setBigDecimal(5, budget.getAmount());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(Budget budget) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE budgets SET user_id = ?, name = ?, start_date ="
-                                                    + " ?, end_date = ?, amount = ? WHERE budget_id"
-                                                    + " = ?")) {
-                        statement.setLong(1, budget.getUser().getUserId());
-                        statement.setString(2, budget.getName());
-                        statement.setDate(3, java.sql.Date.valueOf(budget.getStartDate()));
-                        statement.setDate(4, java.sql.Date.valueOf(budget.getEndDate()));
-                        statement.setBigDecimal(5, budget.getAmount());
-                        statement.setLong(6, budget.getBudgetId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(Budget budget) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM budgets WHERE budget_id = ?")) {
-                        statement.setLong(1, budget.getBudgetId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/java/com/fanta/dao/EarningCategoryDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/EarningCategoryDAO.java b/src/main/java/com/fanta/dao/EarningCategoryDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/EarningCategoryDAO.java	
+++ /dev/null	
@@ -1,103 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.EarningCategory;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class EarningCategoryDAO extends BaseDAO<EarningCategory> implements DAO<EarningCategory> {
-    @Override
-    public EarningCategory findById(Long earningCategoryId) {
-        EarningCategory earningCategory = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM earning_categories WHERE earning_category_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, earningCategoryId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                earningCategory =
-                        new EarningCategory(
-                                resultSet.getLong("earning_category_id"),
-                                resultSet.getString("earning_category_name"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return earningCategory;
-    }
-
-    @Override
-    public List<EarningCategory> findAll() {
-        List<EarningCategory> earningCategories = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement =
-                        connection.prepareStatement("SELECT * FROM earning_categories")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                EarningCategory earningCategory =
-                        new EarningCategory(
-                                resultSet.getLong("earning_category_id"),
-                                resultSet.getString("earning_category_name"));
-                earningCategories.add(earningCategory);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return earningCategories;
-    }
-
-    @Override
-    public void save(EarningCategory earningCategory) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO earning_categories (earning_category_name)"
-                                                    + " VALUES (?)")) {
-                        statement.setString(1, earningCategory.getEarningCategoryName());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(EarningCategory earningCategory) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE earning_categories SET earning_category_name ="
-                                                    + " ? WHERE earning_category_id = ?")) {
-                        statement.setString(1, earningCategory.getEarningCategoryName());
-                        statement.setLong(2, earningCategory.getEarningCategoryId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(EarningCategory earningCategory) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM earning_categories WHERE"
-                                                    + " earning_category_id = ?")) {
-                        statement.setLong(1, earningCategory.getEarningCategoryId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/java/com/fanta/entity/CostCategory.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/CostCategory.java b/src/main/java/com/fanta/entity/CostCategory.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/CostCategory.java	
+++ /dev/null	
@@ -1,37 +0,0 @@
-package com.fanta.entity;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "cost_categories")
-public class CostCategory {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "cost_category_id")
-    private Long costCategoryId;
-
-    @Column(name = "cost_category_name")
-    private String costCategoryName;
-
-    public Long getCostCategoryId() {
-        return costCategoryId;
-    }
-
-    public void setCostCategoryId(Long costCategoryId) {
-        this.costCategoryId = costCategoryId;
-    }
-
-    public String getCostCategoryName() {
-        return costCategoryName;
-    }
-
-    public void setCostCategoryName(String costCategoryName) {
-        this.costCategoryName = costCategoryName;
-    }
-}
Index: src/main/resources/migration/V1__seed_data.sql
===================================================================
diff --git a/src/main/resources/migration/V1__seed_data.sql b/src/main/resources/migration/V1__seed_data.sql
deleted file mode 100644
--- a/src/main/resources/migration/V1__seed_data.sql	
+++ /dev/null	
@@ -1,484 +0,0 @@
--- таблиця користувачів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'users' AND schemaname = 'public') THEN
-            CREATE TABLE users
-            (
-                user_id       SERIAL PRIMARY KEY,
-                 first_name    VARCHAR(50)                         NOT NULL,
-                last_name     VARCHAR(50)                         NOT NULL,
-                email         VARCHAR(100) UNIQUE                 NOT NULL,
-                password_hash VARCHAR(100)                        NOT NULL,-- зберігати хеш пароля замість самого пароля
-                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
-                user_status   VARCHAR(20)                         NOT NULL,
-                CONSTRAINT chk_user_status CHECK (user_status IN ('active', 'inactive', 'admin')) -- додати обмеження на значення user_status
-            );
-        ELSE
-            RAISE NOTICE 'Table users already exists';
-        END IF;
-    END
-$$;
-
--- таблиця курсів валют
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'exchange_rates'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE exchange_rates
-            (
-                exchange_id   SERIAL PRIMARY KEY,
-                name_currency VARCHAR(10)    NOT NULL,
-                rate          NUMERIC(10, 4) NOT NULL CHECK (rate >= 0)
-            );
-        ELSE
-            RAISE NOTICE 'Table exchange_rates already exists';
-        END IF;
-    END
-$$;
-
--- таблиця транзакцій
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'transactions'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE transactions
-            (
-                transaction_id     SERIAL PRIMARY KEY,
-                user_id            INTEGER REFERENCES users (user_id),
-                transaction_type   VARCHAR(50)    NOT NULL,
-                transaction_date   TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
-                transaction_amount NUMERIC(10, 2) NOT NULL CHECK (transaction_amount >= 0),
-                description        VARCHAR(300),
-                exchange_id        INTEGER REFERENCES exchange_rates (exchange_id),
-                CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users (user_id),
-                CONSTRAINT fk_exchange_id FOREIGN KEY (exchange_id) REFERENCES exchange_rates (exchange_id)
-            );
-        ELSE
-            RAISE NOTICE 'Table transactions already exists';
-        END IF;
-    END
-$$;
-
--- таблиця бюджетів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'budgets' AND schemaname = 'public') THEN
-            CREATE TABLE budgets
-            (
-                budget_id  SERIAL PRIMARY KEY,
-                user_id    INTEGER        NOT NULL REFERENCES users (user_id),
-                name       VARCHAR(50)    NOT NULL,
-                start_date DATE           NOT NULL CHECK (start_date <= end_date),
-                end_date   DATE CHECK (end_date >= end_date),
-                amount     NUMERIC(10, 2) NOT NULL CHECK (amount >= 0),
-                CONSTRAINT unique_budget_name_user_id UNIQUE (name, user_id)
-            );
-        ELSE
-            RAISE NOTICE 'Table budgets already exists';
-        END IF;
-    END
-$$;
-
--- таблиця категорій витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'cost_categories'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE cost_categories
-            (
-                cost_category_id   SERIAL PRIMARY KEY,
-                cost_category_name VARCHAR(100) NOT NULL
-            );
-        ELSE
-            RAISE NOTICE 'Table cost_categories already exists';
-        END IF;
-    END
-$$;
-
--- таблиця категорій доходів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'earning_categories'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE earning_categories
-            (
-                earning_category_id   SERIAL PRIMARY KEY,
-                earning_category_name VARCHAR(100) NOT NULL
-            );
-        ELSE
-            RAISE NOTICE 'Table earning_categories already exists';
-        END IF;
-    END
-$$;
-
--- таблиця витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'costs' AND schemaname = 'public') THEN
-            CREATE TABLE costs
-            (
-                cost_id          SERIAL PRIMARY KEY,
-                user_id          INTEGER        NOT NULL REFERENCES users (user_id),
-                cost_category_id INTEGER        NOT NULL REFERENCES cost_categories (cost_category_id),
-                budget_id        INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                transaction_id   INTEGER        NOT NULL REFERENCES transactions (transaction_id),
-                cost_date        TIMESTAMP      NOT NULL,
-                cost_amount      NUMERIC(10, 2) NOT NULL CHECK (cost_amount >= 0),
-                cost_description VARCHAR(300)   NOT NULL,
-                CONSTRAINT fk_cost_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_category FOREIGN KEY (cost_category_id) REFERENCES cost_categories (cost_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_transaction FOREIGN KEY (transaction_id) REFERENCES transactions (transaction_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table costs already exists';
-        END IF;
-    END
-$$;
-
--- таблиця прибутку
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'earnings' AND schemaname = 'public') THEN
-            CREATE TABLE earnings
-            (
-                earning_id          SERIAL PRIMARY KEY,
-                user_id             INTEGER        NOT NULL REFERENCES users (user_id),
-                earning_category_id INTEGER        NOT NULL REFERENCES earning_categories (earning_category_id),
-                earning_date        TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
-                earning_amount      NUMERIC(10, 2) NOT NULL CHECK (earning_amount >= 0),
-                transaction_id      INTEGER        NOT NULL REFERENCES transactions (transaction_id),
-                budget_id           INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                CONSTRAINT fk_earning_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_category FOREIGN KEY (earning_category_id) REFERENCES earning_categories (earning_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_transaction FOREIGN KEY (transaction_id) REFERENCES transactions (transaction_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table earnings already exists';
-        END IF;
-    END
-$$;
-
--- таблиця планованих витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'planning_costs'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE planning_costs
-            (
-                planning_cost_id   SERIAL PRIMARY KEY,
-                user_id            INTEGER        NOT NULL REFERENCES users (user_id),
-                cost_category_id   INTEGER        NOT NULL REFERENCES cost_categories (cost_category_id),
-                planning_cost_date TIMESTAMP      NOT NULL CHECK (planning_cost_date >= CURRENT_TIMESTAMP),
-                budget_id          INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                planned_amount     NUMERIC(10, 2) NOT NULL CHECK (planned_amount >= 0),
-                CONSTRAINT fk_planning_cost_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_planning_cost_category FOREIGN KEY (cost_category_id) REFERENCES cost_categories (cost_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_planning_cost_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table planning_costs already exists';
-        END IF;
-    END
-$$;
-
--- створюємо індекси для підвищення швидкодії запитів
-CREATE INDEX IF NOT EXISTS idx_cost_user ON costs (user_id);
-CREATE INDEX IF NOT EXISTS idx_cost_budget ON costs (budget_id);
-CREATE INDEX IF NOT EXISTS idx_earning_user ON earnings (user_id);
-CREATE INDEX IF NOT EXISTS idx_earning_budget ON earnings (budget_id);
-CREATE INDEX IF NOT EXISTS idx_planning_cost_user ON planning_costs (user_id);
-CREATE INDEX IF NOT EXISTS idx_planning_cost_budget ON planning_costs (budget_id);
-CREATE INDEX IF NOT EXISTS idx_cost_earning_cost ON cost_earning (cost_id);
-CREATE INDEX IF NOT EXISTS idx_cost_earning_earning ON cost_earning (earning_id);
-
--- таблиця користувачів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'users' AND schemaname = 'public') THEN
-            CREATE TABLE users
-            (
-                user_id       SERIAL PRIMARY KEY,
-                first_name    VARCHAR(50)                         NOT NULL,
-                last_name     VARCHAR(50)                         NOT NULL,
-                email         VARCHAR(100) UNIQUE                 NOT NULL,
-                password_hash VARCHAR(100)                        NOT NULL,-- зберігати хеш пароля замість самого пароля
-                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
-                user_status   VARCHAR(20)                         NOT NULL,
-                CONSTRAINT chk_user_status CHECK (user_status IN ('active', 'inactive', 'admin')) -- додати обмеження на значення user_status
-            );
-        ELSE
-            RAISE NOTICE 'Table users already exists';
-        END IF;
-    END
-$$;
-
--- таблиця курсів валют
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'exchange_rates'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE exchange_rates
-            (
-                exchange_id   SERIAL PRIMARY KEY,
-                name_currency VARCHAR(10)    NOT NULL,
-                rate          NUMERIC(10, 4) NOT NULL CHECK (rate >= 0)
-            );
-        ELSE
-            RAISE NOTICE 'Table exchange_rates already exists';
-        END IF;
-    END
-$$;
-
--- таблиця транзакцій
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'transactions'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE transactions
-            (
-                transaction_id     SERIAL PRIMARY KEY,
-                user_id            INTEGER REFERENCES users (user_id),
-                transaction_type   VARCHAR(50)    NOT NULL,
-                transaction_date   TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
-                transaction_amount NUMERIC(10, 2) NOT NULL CHECK (transaction_amount >= 0),
-                description        VARCHAR(300),
-                exchange_id        INTEGER REFERENCES exchange_rates (exchange_id),
-                CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users (user_id),
-                CONSTRAINT fk_exchange_id FOREIGN KEY (exchange_id) REFERENCES exchange_rates (exchange_id)
-            );
-        ELSE
-            RAISE NOTICE 'Table transactions already exists';
-        END IF;
-    END
-$$;
-
--- таблиця бюджетів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'budgets' AND schemaname = 'public') THEN
-            CREATE TABLE budgets
-            (
-                budget_id  SERIAL PRIMARY KEY,
-                user_id    INTEGER        NOT NULL REFERENCES users (user_id),
-                name       VARCHAR(50)    NOT NULL,
-                start_date DATE           NOT NULL CHECK (start_date <= end_date),
-                end_date   DATE CHECK (end_date >= end_date),
-                amount     NUMERIC(10, 2) NOT NULL CHECK (amount >= 0),
-                CONSTRAINT unique_budget_name_user_id UNIQUE (name, user_id)
-            );
-        ELSE
-            RAISE NOTICE 'Table budgets already exists';
-        END IF;
-    END
-$$;
-
--- таблиця категорій витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'cost_categories'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE cost_categories
-            (
-                cost_category_id   SERIAL PRIMARY KEY,
-                cost_category_name VARCHAR(100) NOT NULL
-            );
-        ELSE
-            RAISE NOTICE 'Table cost_categories already exists';
-        END IF;
-    END
-$$;
-
--- таблиця категорій доходів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'earning_categories'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE earning_categories
-            (
-                earning_category_id   SERIAL PRIMARY KEY,
-                earning_category_name VARCHAR(100) NOT NULL
-            );
-        ELSE
-            RAISE NOTICE 'Table earning_categories already exists';
-        END IF;
-    END
-$$;
-
--- таблиця витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'costs' AND schemaname = 'public') THEN
-            CREATE TABLE costs
-            (
-                cost_id          SERIAL PRIMARY KEY,
-                user_id          INTEGER        NOT NULL REFERENCES users (user_id),
-                cost_category_id INTEGER        NOT NULL REFERENCES cost_categories (cost_category_id),
-                budget_id        INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                transaction_id   INTEGER        NOT NULL REFERENCES transactions (transaction_id),
-                cost_date        TIMESTAMP      NOT NULL,
-                cost_amount      NUMERIC(10, 2) NOT NULL CHECK (cost_amount >= 0),
-                cost_description VARCHAR(300)   NOT NULL,
-                CONSTRAINT fk_cost_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_category FOREIGN KEY (cost_category_id) REFERENCES cost_categories (cost_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_transaction FOREIGN KEY (transaction_id) REFERENCES transactions (transaction_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table costs already exists';
-        END IF;
-    END
-$$;
-
--- таблиця прибутку
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'earnings' AND schemaname = 'public') THEN
-            CREATE TABLE earnings
-            (
-                earning_id          SERIAL PRIMARY KEY,
-                user_id             INTEGER        NOT NULL REFERENCES users (user_id),
-                earning_category_id INTEGER        NOT NULL REFERENCES earning_categories (earning_category_id),
-                earning_date        TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
-                earning_amount      NUMERIC(10, 2) NOT NULL CHECK (earning_amount >= 0),
-                transaction_id      INTEGER        NOT NULL REFERENCES transactions (transaction_id),
-                budget_id           INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                CONSTRAINT fk_earning_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_category FOREIGN KEY (earning_category_id) REFERENCES earning_categories (earning_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_transaction FOREIGN KEY (transaction_id) REFERENCES transactions (transaction_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table earnings already exists';
-        END IF;
-    END
-$$;
-
--- таблиця планованих витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'planning_costs'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE planning_costs
-            (
-                planning_cost_id   SERIAL PRIMARY KEY,
-                user_id            INTEGER        NOT NULL REFERENCES users (user_id),
-                cost_category_id   INTEGER        NOT NULL REFERENCES cost_categories (cost_category_id),
-                planning_cost_date TIMESTAMP      NOT NULL CHECK (planning_cost_date >= CURRENT_TIMESTAMP),
-                budget_id          INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                planned_amount     NUMERIC(10, 2) NOT NULL CHECK (planned_amount >= 0),
-                CONSTRAINT fk_planning_cost_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_planning_cost_category FOREIGN KEY (cost_category_id) REFERENCES cost_categories (cost_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_planning_cost_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table planning_costs already exists';
-        END IF;
-    END
-$$;
-
--- зв'язуюча таблиця між витратами та доходами
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'cost_earning'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE cost_earning
-            (
-                cost_id    INTEGER NOT NULL REFERENCES costs (cost_id),
-                earning_id INTEGER NOT NULL REFERENCES earnings (earning_id),
-                PRIMARY KEY (cost_id, earning_id),
-                CONSTRAINT fk_cost_earning_cost FOREIGN KEY (cost_id) REFERENCES costs (cost_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_earning_earning FOREIGN KEY (earning_id) REFERENCES earnings (earning_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table cost_earning already exists';
-        END IF;
-    END
-$$;
-
--- створюємо індекси для підвищення швидкодії запитів
-CREATE INDEX IF NOT EXISTS idx_cost_user ON costs (user_id);
-CREATE INDEX IF NOT EXISTS idx_cost_budget ON costs (budget_id);
-CREATE INDEX IF NOT EXISTS idx_earning_user ON earnings (user_id);
-CREATE INDEX IF NOT EXISTS idx_earning_budget ON earnings (budget_id);
-CREATE INDEX IF NOT EXISTS idx_planning_cost_user ON planning_costs (user_id);
-CREATE INDEX IF NOT EXISTS idx_planning_cost_budget ON planning_costs (budget_id);
-CREATE INDEX IF NOT EXISTS idx_cost_earning_cost ON cost_earning (cost_id);
-CREATE INDEX IF NOT EXISTS idx_cost_earning_earning ON cost_earning (earning_id);
-
-INSERT INTO users (first_name, last_name, email, password_hash, registered_at, user_status)
-VALUES ('John', 'Doe', 'johndoe@gmail.com', 'password123', '2022-01-01 10:00:00', 'active'),
-       ('Jane', 'Doe', 'janedoeй@gmail.com', 'password456', '2022-01-02 12:00:00', 'inactive'),
-       ('Bob', 'Smith', 'bobsmith@yahoo.com', 'password789', '2022-01-03 15:00:00', 'admin'),
-       ('Alice', 'Johnson', 'alicejohnson@hotmail.com', 'passwordabc', '2022-01-04 17:00:00', 'active');
-INSERT INTO exchange_rates (name_currency, rate)
-VALUES ('USD', 1.00),
-       ('EUR', 1.20),
-       ('GBP', 1.40),
-       ('JPY', 0.009);
-INSERT INTO transactions (user_id, transaction_type, transaction_date, transaction_amount, description, exchange_id)
-VALUES (1, 'expense', '2022-01-05 10:00:00', 50.00, 'Groceries', 1),
-       (2, 'income', '2022-01-06 12:00:00', 1000.00, 'Salary', 2),
-       (3, 'expense', '2022-01-07 15:00:00', 25.00, 'Coffee', 3),
-       (4, 'income', '2022-01-08 17:00:00', 500.00, 'Freelance work', 4);
-INSERT INTO budgets (user_id, name, start_date, end_date, amount)
-VALUES (1, 'January Budget', '2022-01-01', '2022-01-31', 1000.00),
-       (2, 'February Budget', '2022-02-01', '2022-02-28', 1500.00),
-       (3, 'March Budget', '2022-03-01', '2022-03-31', 2000.00),
-       (4, 'April Budget', '2022-04-01', '2022-04-30', 2500.00);
-INSERT INTO cost_categories (cost_category_name)
-VALUES ('Food'),
-       ('Housing'),
-       ('Transportation'),
-       ('Entertainment');
-INSERT INTO earning_categories (earning_category_name)
-VALUES ('Salary'),
-       ('Freelance work'),
-       ('Investment');
-
-
-
-
-
Index: src/main/java/com/fanta/entity/Transaction.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/Transaction.java b/src/main/java/com/fanta/entity/Transaction.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/Transaction.java	
+++ /dev/null	
@@ -1,99 +0,0 @@
-package com.fanta.entity;
-
-import java.math.BigDecimal;
-import java.sql.Timestamp;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "transactions")
-public class Transaction {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "transaction_id")
-    private Long transactionId;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "user_id")
-    private User user;
-
-    @Column(name = "transaction_type")
-    private String transactionType;
-
-    @Column(name = "transaction_date")
-    private Timestamp transactionDate;
-
-    @Column(name = "transaction_amount")
-    private BigDecimal transactionAmount;
-
-    @Column(name = "description")
-    private String description;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "exchange_id")
-    private ExchangeRate exchangeRate;
-
-    public Long getTransactionId() {
-        return transactionId;
-    }
-
-    public void setTransactionId(Long transactionId) {
-        this.transactionId = transactionId;
-    }
-
-    public User getUser() {
-        return user;
-    }
-
-    public void setUser(User user) {
-        this.user = user;
-    }
-
-    public String getTransactionType() {
-        return transactionType;
-    }
-
-    public void setTransactionType(String transactionType) {
-        this.transactionType = transactionType;
-    }
-
-    public Timestamp getTransactionDate() {
-        return transactionDate;
-    }
-
-    public void setTransactionDate(Timestamp transactionDate) {
-        this.transactionDate = transactionDate;
-    }
-
-    public BigDecimal getTransactionAmount() {
-        return transactionAmount;
-    }
-
-    public void setTransactionAmount(BigDecimal transactionAmount) {
-        this.transactionAmount = transactionAmount;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public ExchangeRate getExchangeRate() {
-        return exchangeRate;
-    }
-
-    public void setExchangeRate(ExchangeRate exchangeRate) {
-        this.exchangeRate = exchangeRate;
-    }
-}
Index: src/main/java/com/fanta/service/TransactionService.java
===================================================================
diff --git a/src/main/java/com/fanta/service/TransactionService.java b/src/main/java/com/fanta/service/TransactionService.java
deleted file mode 100644
--- a/src/main/java/com/fanta/service/TransactionService.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.fanta.service;
-
-import com.fanta.dao.TransactionDAO;
-import com.fanta.entity.Transaction;
-
-import java.util.List;
-
-public class TransactionService implements Service<Transaction> {
-    private TransactionDAO transactionDAO;
-
-    public TransactionService() {
-        transactionDAO = new TransactionDAO();
-    }
-
-    @Override
-    public Transaction getById(Long transactionId) {
-        return transactionDAO.findById(transactionId);
-    }
-
-    @Override
-    public List<Transaction> getAll() {
-        return transactionDAO.findAll();
-    }
-
-    @Override
-    public void save(Transaction transaction) {
-        transactionDAO.save(transaction);
-    }
-
-    @Override
-    public void update(Transaction transaction) {
-        transactionDAO.update(transaction);
-    }
-
-    @Override
-    public void delete(Transaction transaction) {
-        transactionDAO.delete(transaction);
-    }
-}
Index: src/main/java/com/fanta/dao/DAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/DAO.java b/src/main/java/com/fanta/dao/DAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/DAO.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.fanta.dao;
-
-import java.util.List;
-
-public interface DAO<T> {
-    T findById(Long id);
-
-    List<T> findAll();
-
-    void save(T entity);
-
-    void update(T entity);
-
-    void delete(T entity);
-}
Index: src/main/java/com/fanta/dao/CostCategoryDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/CostCategoryDAO.java b/src/main/java/com/fanta/dao/CostCategoryDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/CostCategoryDAO.java	
+++ /dev/null	
@@ -1,102 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.CostCategory;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class CostCategoryDAO extends BaseDAO<CostCategory> implements DAO<CostCategory> {
-
-    @Override
-    public CostCategory findById(Long costCategoryId) {
-        CostCategory costCategory = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM cost_categories WHERE cost_category_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, costCategoryId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                costCategory = new CostCategory();
-                costCategory.setCostCategoryId(resultSet.getLong("cost_category_id"));
-                costCategory.setCostCategoryName(resultSet.getString("cost_category_name"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return costCategory;
-    }
-
-    @Override
-    public List<CostCategory> findAll() {
-        List<CostCategory> costCategories = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement =
-                        connection.prepareStatement("SELECT * FROM cost_categories")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                CostCategory costCategory = new CostCategory();
-                costCategory.setCostCategoryId(resultSet.getLong("cost_category_id"));
-                costCategory.setCostCategoryName(resultSet.getString("cost_category_name"));
-                costCategories.add(costCategory);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return costCategories;
-    }
-
-    @Override
-    public void save(CostCategory costCategory) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO cost_categories (cost_category_name)"
-                                                    + " VALUES (?)")) {
-                        statement.setString(1, costCategory.getCostCategoryName());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(CostCategory costCategory) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE cost_categories SET cost_category_name = ?"
-                                                    + " WHERE cost_category_id = ?")) {
-                        statement.setString(1, costCategory.getCostCategoryName());
-                        statement.setLong(2, costCategory.getCostCategoryId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(CostCategory costCategory) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM cost_categories WHERE cost_category_id"
-                                                    + " = ?")) {
-                        statement.setLong(1, costCategory.getCostCategoryId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/java/com/fanta/dao/BaseDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/BaseDAO.java b/src/main/java/com/fanta/dao/BaseDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/BaseDAO.java	
+++ /dev/null	
@@ -1,24 +0,0 @@
-package com.fanta.dao;
-
-import static com.fanta.moneywithsoul.Hibernate.sessionFactory;
-
-import com.fanta.database.DataBaseConfig;
-import com.fanta.database.PoolConfig;
-import java.sql.Connection;
-import org.hibernate.Session;
-import org.hibernate.Transaction;
-
-public abstract class BaseDAO<T> extends PoolConfig implements DataBaseConfig {
-
-    protected void executeWithTransaction(Runnable runnable) {
-        try (Connection connection = dataSource.getConnection();
-                Session session =
-                        sessionFactory.withOptions().connection(connection).openSession()) {
-            Transaction transaction = session.beginTransaction();
-            runnable.run();
-            transaction.commit();
-        } catch (Exception exception) {
-            exception.printStackTrace();
-        }
-    }
-}
Index: src/main/java/com/fanta/dao/ExchangeRateDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/ExchangeRateDAO.java b/src/main/java/com/fanta/dao/ExchangeRateDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/ExchangeRateDAO.java	
+++ /dev/null	
@@ -1,106 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.ExchangeRate;
-import java.math.BigDecimal;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class ExchangeRateDAO extends BaseDAO<ExchangeRate> implements DAO<ExchangeRate> {
-
-    @Override
-    public ExchangeRate findById(Long exchangeId) {
-        ExchangeRate exchangeRate = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM exchange_rates WHERE exchange_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, exchangeId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                exchangeRate = new ExchangeRate();
-                exchangeRate.setExchangeId(resultSet.getLong("exchange_id"));
-                exchangeRate.setNameCurrency(resultSet.getString("name_currency"));
-                exchangeRate.setRate(resultSet.getBigDecimal("rate"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return exchangeRate;
-    }
-
-    @Override
-    public List<ExchangeRate> findAll() {
-        List<ExchangeRate> exchangeRates = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement =
-                        connection.prepareStatement("SELECT * FROM exchange_rates")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                ExchangeRate exchangeRate = new ExchangeRate();
-                exchangeRate.setExchangeId(resultSet.getLong("exchange_id"));
-                exchangeRate.setNameCurrency(resultSet.getString("name_currency"));
-                exchangeRate.setRate(resultSet.getBigDecimal("rate"));
-                exchangeRates.add(exchangeRate);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return exchangeRates;
-    }
-
-    @Override
-    public void save(ExchangeRate exchangeRate) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO exchange_rates (name_currency, rate)"
-                                                    + " VALUES (?, ?)")) {
-                        statement.setString(1, exchangeRate.getNameCurrency());
-                        statement.setBigDecimal(2, exchangeRate.getRate());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(ExchangeRate exchangeRate) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE exchange_rates SET name_currency = ?, rate = ?"
-                                                    + " WHERE exchange_id = ?")) {
-                        statement.setString(1, exchangeRate.getNameCurrency());
-                        statement.setBigDecimal(2, exchangeRate.getRate());
-                        statement.setLong(3, exchangeRate.getExchangeId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(ExchangeRate exchangeRate) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM exchange_rates WHERE exchange_id = ?")) {
-                        statement.setLong(1, exchangeRate.getExchangeId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/java/com/fanta/entity/EarningCategory.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/EarningCategory.java b/src/main/java/com/fanta/entity/EarningCategory.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/EarningCategory.java	
+++ /dev/null	
@@ -1,42 +0,0 @@
-package com.fanta.entity;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "earning_categories")
-public class EarningCategory {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "earning_category_id")
-    private Long earningCategoryId;
-
-    @Column(name = "earning_category_name")
-    private String earningCategoryName;
-
-    public EarningCategory(long earning_category_id, String earning_category_name) {
-        this.earningCategoryId = earning_category_id;
-        this.earningCategoryName = earning_category_name;
-    }
-
-    public Long getEarningCategoryId() {
-        return earningCategoryId;
-    }
-
-    public void setEarningCategoryId(Long earningCategoryId) {
-        this.earningCategoryId = earningCategoryId;
-    }
-
-    public String getEarningCategoryName() {
-        return earningCategoryName;
-    }
-
-    public void setEarningCategoryName(String earningCategoryName) {
-        this.earningCategoryName = earningCategoryName;
-    }
-}
Index: src/main/java/com/fanta/moneywithsoul/Logerr.java
===================================================================
diff --git a/src/main/java/com/fanta/moneywithsoul/Logerr.java b/src/main/java/com/fanta/moneywithsoul/Logerr.java
deleted file mode 100644
--- a/src/main/java/com/fanta/moneywithsoul/Logerr.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package com.fanta.moneywithsoul;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class Logerr {
-    private static final Logger LOGGER = LoggerFactory.getLogger(Logerr.class);
-
-    public void myMethod() {
-        LOGGER.debug("Debug message");
-        LOGGER.info("Info message");
-        LOGGER.warn("Warn message");
-        LOGGER.error("Error message");
-    }
-}
Index: src/main/java/com/fanta/entity/Earning.java
===================================================================
diff --git a/src/main/java/com/fanta/entity/Earning.java b/src/main/java/com/fanta/entity/Earning.java
deleted file mode 100644
--- a/src/main/java/com/fanta/entity/Earning.java	
+++ /dev/null	
@@ -1,120 +0,0 @@
-package com.fanta.entity;
-
-import java.math.BigDecimal;
-import java.sql.Timestamp;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "earnings")
-public class Earning {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "earning_id")
-    private Long earningId;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "user_id")
-    private User user;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "earning_category_id")
-    private EarningCategory earningCategory;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "transaction_id")
-    private Transaction transaction;
-
-    @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "budget_id")
-    private Budget budget;
-
-    @Column(name = "earning_date")
-    private Timestamp earningDate;
-
-    @Column(name = "earning_amount")
-    private BigDecimal earningAmount;
-
-    public Earning(
-            long earning_id,
-            User user_id,
-            EarningCategory earning_category_id,
-            Transaction transaction_id,
-            Budget budget_id,
-            Timestamp earning_date,
-            BigDecimal earning_amount) {
-        this.earningId = earning_id;
-        this.user = user_id;
-        this.earningCategory = earning_category_id;
-        this.transaction = transaction_id;
-        this.budget = budget_id;
-        this.earningDate = earning_date;
-        this.earningAmount = earning_amount;
-    }
-
-    public Earning() {}
-
-    public Long getEarningId() {
-        return earningId;
-    }
-
-    public void setEarningId(Long earningId) {
-        this.earningId = earningId;
-    }
-
-    public User getUser() {
-        return user;
-    }
-
-    public void setUser(User user) {
-        this.user = user;
-    }
-
-    public EarningCategory getEarningCategory() {
-        return earningCategory;
-    }
-
-    public void setEarningCategory(EarningCategory earningCategory) {
-        this.earningCategory = earningCategory;
-    }
-
-    public Transaction getTransaction() {
-        return transaction;
-    }
-
-    public void setTransaction(Transaction transaction) {
-        this.transaction = transaction;
-    }
-
-    public Budget getBudget() {
-        return budget;
-    }
-
-    public void setBudget(Budget budget) {
-        this.budget = budget;
-    }
-
-    public Timestamp getEarningDate() {
-        return earningDate;
-    }
-
-    public void setEarningDate(Timestamp earningDate) {
-        this.earningDate = earningDate;
-    }
-
-    public BigDecimal getEarningAmount() {
-        return earningAmount;
-    }
-
-    public void setEarningAmount(BigDecimal earningAmount) {
-        this.earningAmount = earningAmount;
-    }
-}
Index: src/main/java/com/fanta/dao/TransactionDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/TransactionDAO.java b/src/main/java/com/fanta/dao/TransactionDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/TransactionDAO.java	
+++ /dev/null	
@@ -1,127 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.Transaction;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class TransactionDAO extends BaseDAO<Transaction> implements DAO<Transaction> {
-
-    @Override
-    public Transaction findById(Long transactionId) {
-        Transaction transaction = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM transactions WHERE transaction_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, transactionId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                transaction = new Transaction();
-                transaction.setTransactionId(resultSet.getLong("transaction_id"));
-                transaction.setUser(new UserDAO().findById(resultSet.getLong("user_id")));
-                transaction.setTransactionType(resultSet.getString("transaction_type"));
-                transaction.setTransactionDate(resultSet.getTimestamp("transaction_date"));
-                transaction.setTransactionAmount(resultSet.getBigDecimal("transaction_amount"));
-                transaction.setDescription(resultSet.getString("description"));
-                transaction.setExchangeRate(
-                        new ExchangeRateDAO().findById(resultSet.getLong("exchange_id")));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return transaction;
-    }
-
-    @Override
-    public List<Transaction> findAll() {
-        List<Transaction> transactions = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement =
-                        connection.prepareStatement("SELECT * FROM transactions")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                Transaction transaction = new Transaction();
-                transaction.setTransactionId(resultSet.getLong("transaction_id"));
-                transaction.setUser(new UserDAO().findById(resultSet.getLong("user_id")));
-                transaction.setTransactionType(resultSet.getString("transaction_type"));
-                transaction.setTransactionDate(resultSet.getTimestamp("transaction_date"));
-                transaction.setTransactionAmount(resultSet.getBigDecimal("transaction_amount"));
-                transaction.setDescription(resultSet.getString("description"));
-                transaction.setExchangeRate(
-                        new ExchangeRateDAO().findById(resultSet.getLong("exchange_id")));
-                transactions.add(transaction);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return transactions;
-    }
-
-    @Override
-    public void save(Transaction transaction) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO transactions (user_id, transaction_type,"
-                                                + " transaction_date, transaction_amount,"
-                                                + " description, exchange_id) VALUES (?, ?, ?, ?,"
-                                                + " ?, ?)")) {
-                        statement.setLong(1, transaction.getUser().getUserId());
-                        statement.setString(2, transaction.getTransactionType());
-                        statement.setTimestamp(3, transaction.getTransactionDate());
-                        statement.setBigDecimal(4, transaction.getTransactionAmount());
-                        statement.setString(5, transaction.getDescription());
-                        statement.setBigDecimal(6, transaction.getExchangeRate().getRate());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(Transaction transaction) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE transactions SET user_id = ?, transaction_type"
-                                                + " = ?, transaction_date = ?, transaction_amount ="
-                                                + " ?, description = ?, exchange_id = ? WHERE"
-                                                + " transaction_id = ?")) {
-                        statement.setLong(1, transaction.getUser().getUserId());
-                        statement.setString(2, transaction.getTransactionType());
-                        statement.setTimestamp(3, transaction.getTransactionDate());
-                        statement.setBigDecimal(4, transaction.getTransactionAmount());
-                        statement.setString(5, transaction.getDescription());
-                        statement.setBigDecimal(6, transaction.getExchangeRate().getRate());
-                        statement.setLong(7, transaction.getTransactionId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(Transaction transaction) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM transactions WHERE transaction_id = ?")) {
-                        statement.setLong(1, transaction.getTransactionId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/resources/migration/dml.sql
===================================================================
diff --git a/src/main/resources/migration/dml.sql b/src/main/resources/migration/dml.sql
deleted file mode 100644
--- a/src/main/resources/migration/dml.sql	
+++ /dev/null	
@@ -1,29 +0,0 @@
-INSERT INTO users (first_name, last_name, email, password_hash, registered_at, user_status) VALUES
-('John', 'Doe', 'johndoe@gmail.com', 'password123', '2022-01-01 10:00:00', 'active'),
-('Jane', 'Doe', 'janedoeй@gmail.com', 'password456', '2022-01-02 12:00:00', 'inactive'),
-('Bob', 'Smith', 'bobsmith@yahoo.com', 'password789', '2022-01-03 15:00:00', 'admin'),
-('Alice', 'Johnson', 'alicejohnson@hotmail.com', 'passwordabc', '2022-01-04 17:00:00', 'active');
-INSERT INTO exchange_rates (name_currency, rate) VALUES
-('USD', 1.00),
-('EUR', 1.20),
-('GBP', 1.40),
-('JPY', 0.009);
-INSERT INTO transactions (user_id, transaction_type, transaction_date, transaction_amount, description, exchange_id) VALUES
-(1, 'expense', '2022-01-05 10:00:00', 50.00, 'Groceries', 1),
-(2, 'income', '2022-01-06 12:00:00', 1000.00, 'Salary', 2),
-(3, 'expense', '2022-01-07 15:00:00', 25.00, 'Coffee', 3),
-(4, 'income', '2022-01-08 17:00:00', 500.00, 'Freelance work', 4);
-INSERT INTO budgets (user_id, name, start_date, end_date, amount) VALUES
-(1, 'January Budget', '2022-01-01', '2022-01-31', 1000.00),
-(2, 'February Budget', '2022-02-01', '2022-02-28', 1500.00),
-(3, 'March Budget', '2022-03-01', '2022-03-31', 2000.00),
-(4, 'April Budget', '2022-04-01', '2022-04-30', 2500.00);
-INSERT INTO cost_categories (cost_category_name) VALUES
-('Food'),
-('Housing'),
-('Transportation'),
-('Entertainment');
-INSERT INTO earning_categories (earning_category_name) VALUES
-('Salary'),
-('Freelance work'),
-('Investment');
Index: src/main/resources/migration/ddl.sql
===================================================================
diff --git a/src/main/resources/migration/ddl.sql b/src/main/resources/migration/ddl.sql
deleted file mode 100644
--- a/src/main/resources/migration/ddl.sql	
+++ /dev/null	
@@ -1,263 +0,0 @@
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_database WHERE datname = 'money-with-soul') THEN
-            CREATE DATABASE "money-with-soul";
-        END IF;
-    END
-$$;
-
-
-DROP TABLE IF EXISTS users CASCADE;
-DROP TABLE IF EXISTS exchange_rates CASCADE;
-DROP TABLE IF EXISTS transactions CASCADE;
-DROP TABLE IF EXISTS budgets CASCADE;
-DROP TABLE IF EXISTS cost_categories CASCADE;
-DROP TABLE IF EXISTS earning_categories CASCADE;
-DROP TABLE IF EXISTS costs CASCADE;
-DROP TABLE IF EXISTS earnings CASCADE;
-DROP TABLE IF EXISTS planning_costsplanning_costs CASCADE;
-DROP TABLE IF EXISTS cost_earning CASCADE;
-
--- таблиця користувачів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'users' AND schemaname = 'public') THEN
-            CREATE TABLE users
-            (
-                user_id       SERIAL PRIMARY KEY,
-                first_name    VARCHAR(50)                         NOT NULL,
-                last_name     VARCHAR(50)                         NOT NULL,
-                email         VARCHAR(100) UNIQUE                 NOT NULL,
-                password_hash VARCHAR(100)                        NOT NULL,-- зберігати хеш пароля замість самого пароля
-                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
-                user_status   VARCHAR(20)                         NOT NULL,
-                CONSTRAINT chk_user_status CHECK (user_status IN ('active', 'inactive', 'admin')) -- додати обмеження на значення user_status
-            );
-        ELSE
-            RAISE NOTICE 'Table users already exists';
-        END IF;
-    END
-$$;
-
--- таблиця курсів валют
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'exchange_rates'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE exchange_rates
-            (
-                exchange_id   SERIAL PRIMARY KEY,
-                name_currency VARCHAR(10)    NOT NULL,
-                rate          NUMERIC(10, 4) NOT NULL CHECK (rate >= 0)
-            );
-        ELSE
-            RAISE NOTICE 'Table exchange_rates already exists';
-        END IF;
-    END
-$$;
-
--- таблиця транзакцій
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'transactions'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE transactions
-            (
-                transaction_id     SERIAL PRIMARY KEY,
-                user_id            INTEGER REFERENCES users (user_id),
-                transaction_type   VARCHAR(50)    NOT NULL,
-                transaction_date   TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
-                transaction_amount NUMERIC(10, 2) NOT NULL CHECK (transaction_amount >= 0),
-                description        VARCHAR(300),
-                exchange_id        INTEGER REFERENCES exchange_rates (exchange_id),
-                CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users (user_id),
-                CONSTRAINT fk_exchange_id FOREIGN KEY (exchange_id) REFERENCES exchange_rates (exchange_id)
-            );
-        ELSE
-            RAISE NOTICE 'Table transactions already exists';
-        END IF;
-    END
-$$;
-
--- таблиця бюджетів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'budgets' AND schemaname = 'public') THEN
-            CREATE TABLE budgets
-            (
-                budget_id  SERIAL PRIMARY KEY,
-                user_id    INTEGER        NOT NULL REFERENCES users (user_id),
-                name       VARCHAR(50)    NOT NULL,
-                start_date DATE           NOT NULL CHECK (start_date <= end_date),
-                end_date   DATE CHECK (end_date >= end_date),
-                amount     NUMERIC(10, 2) NOT NULL CHECK (amount >= 0),
-                CONSTRAINT unique_budget_name_user_id UNIQUE (name, user_id)
-            );
-        ELSE
-            RAISE NOTICE 'Table budgets already exists';
-        END IF;
-    END
-$$;
-
--- таблиця категорій витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'cost_categories'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE cost_categories
-            (
-                cost_category_id   SERIAL PRIMARY KEY,
-                cost_category_name VARCHAR(100) NOT NULL
-            );
-        ELSE
-            RAISE NOTICE 'Table cost_categories already exists';
-        END IF;
-    END
-$$;
-
--- таблиця категорій доходів
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'earning_categories'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE earning_categories
-            (
-                earning_category_id   SERIAL PRIMARY KEY,
-                earning_category_name VARCHAR(100) NOT NULL
-            );
-        ELSE
-            RAISE NOTICE 'Table earning_categories already exists';
-        END IF;
-    END
-$$;
-
--- таблиця витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'costs' AND schemaname = 'public') THEN
-            CREATE TABLE costs
-            (
-                cost_id          SERIAL PRIMARY KEY,
-                user_id          INTEGER        NOT NULL REFERENCES users (user_id),
-                cost_category_id INTEGER        NOT NULL REFERENCES cost_categories (cost_category_id),
-                budget_id        INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                transaction_id   INTEGER        NOT NULL REFERENCES transactions (transaction_id),
-                cost_date        TIMESTAMP      NOT NULL,
-                cost_amount      NUMERIC(10, 2) NOT NULL CHECK (cost_amount >= 0),
-                cost_description VARCHAR(300)   NOT NULL,
-                CONSTRAINT fk_cost_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_category FOREIGN KEY (cost_category_id) REFERENCES cost_categories (cost_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_transaction FOREIGN KEY (transaction_id) REFERENCES transactions (transaction_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table costs already exists';
-        END IF;
-    END
-$$;
-
--- таблиця прибутку
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'earnings' AND schemaname = 'public') THEN
-            CREATE TABLE earnings
-            (
-                earning_id          SERIAL PRIMARY KEY,
-                user_id             INTEGER        NOT NULL REFERENCES users (user_id),
-                earning_category_id INTEGER        NOT NULL REFERENCES earning_categories (earning_category_id),
-                earning_date        TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
-                earning_amount      NUMERIC(10, 2) NOT NULL CHECK (earning_amount >= 0),
-                transaction_id      INTEGER        NOT NULL REFERENCES transactions (transaction_id),
-                budget_id           INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                CONSTRAINT fk_earning_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_category FOREIGN KEY (earning_category_id) REFERENCES earning_categories (earning_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_transaction FOREIGN KEY (transaction_id) REFERENCES transactions (transaction_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_earning_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table earnings already exists';
-        END IF;
-    END
-$$;
-
--- таблиця планованих витрат
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'planning_costs'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE planning_costs
-            (
-                planning_cost_id   SERIAL PRIMARY KEY,
-                user_id            INTEGER        NOT NULL REFERENCES users (user_id),
-                cost_category_id   INTEGER        NOT NULL REFERENCES cost_categories (cost_category_id),
-                planning_cost_date TIMESTAMP      NOT NULL CHECK (planning_cost_date >= CURRENT_TIMESTAMP),
-                budget_id          INTEGER        NOT NULL REFERENCES budgets (budget_id),
-                planned_amount     NUMERIC(10, 2) NOT NULL CHECK (planned_amount >= 0),
-                CONSTRAINT fk_planning_cost_user FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_planning_cost_category FOREIGN KEY (cost_category_id) REFERENCES cost_categories (cost_category_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_planning_cost_budget FOREIGN KEY (budget_id) REFERENCES budgets (budget_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table planning_costs already exists';
-        END IF;
-    END
-$$;
-
--- зв'язуюча таблиця між витратами та доходами
-DO
-$$
-    BEGIN
-        IF NOT EXISTS(SELECT 1
-                      FROM pg_catalog.pg_tables
-                      WHERE tablename = 'cost_earning'
-                        AND schemaname = 'public') THEN
-            CREATE TABLE cost_earning
-            (
-                cost_id    INTEGER NOT NULL REFERENCES costs (cost_id),
-                earning_id INTEGER NOT NULL REFERENCES earnings (earning_id),
-                PRIMARY KEY (cost_id, earning_id),
-                CONSTRAINT fk_cost_earning_cost FOREIGN KEY (cost_id) REFERENCES costs (cost_id) ON UPDATE CASCADE ON DELETE CASCADE,
-                CONSTRAINT fk_cost_earning_earning FOREIGN KEY (earning_id) REFERENCES earnings (earning_id) ON UPDATE CASCADE ON DELETE CASCADE
-            );
-        ELSE
-            RAISE NOTICE 'Table cost_earning already exists';
-        END IF;
-    END
-$$;
-
-
--- створюємо індекси для підвищення швидкодії запитів
-CREATE INDEX IF NOT EXISTS idx_cost_user ON costs (user_id);
-CREATE INDEX IF NOT EXISTS idx_cost_budget ON costs (budget_id);
-CREATE INDEX IF NOT EXISTS idx_earning_user ON earnings (user_id);
-CREATE INDEX IF NOT EXISTS idx_earning_budget ON earnings (budget_id);
-CREATE INDEX IF NOT EXISTS idx_planning_cost_user ON planning_costs (user_id);
-CREATE INDEX IF NOT EXISTS idx_planning_cost_budget ON planning_costs (budget_id);
-CREATE INDEX IF NOT EXISTS idx_cost_earning_cost ON cost_earning (cost_id);
-CREATE INDEX IF NOT EXISTS idx_cost_earning_earning ON cost_earning (earning_id);
-
-
-
-
-
-
Index: src/main/java/com/fanta/dao/CostDAO.java
===================================================================
diff --git a/src/main/java/com/fanta/dao/CostDAO.java b/src/main/java/com/fanta/dao/CostDAO.java
deleted file mode 100644
--- a/src/main/java/com/fanta/dao/CostDAO.java	
+++ /dev/null	
@@ -1,132 +0,0 @@
-package com.fanta.dao;
-
-import com.fanta.entity.Cost;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class CostDAO extends BaseDAO<Cost> implements DAO<Cost> {
-
-    @Override
-    public Cost findById(Long costId) {
-        Cost cost = null;
-        try (Connection connection = dataSource.getConnection()) {
-            String sql = "SELECT * FROM costs WHERE cost_id = ?";
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setLong(1, costId);
-            ResultSet resultSet = statement.executeQuery();
-            if (resultSet.next()) {
-                cost = new Cost();
-                cost.setCostId(resultSet.getLong("cost_id"));
-                cost.setUser(new UserDAO().findById(resultSet.getLong("user_id")));
-                cost.setCostCategory(
-                        new CostCategoryDAO().findById(resultSet.getLong("cost_category_id")));
-                cost.setBudget(new BudgetDAO().findById(resultSet.getLong("budget_id")));
-                cost.setTransaction(
-                        new TransactionDAO().findById(resultSet.getLong("transaction_id")));
-                cost.setCostDate(resultSet.getTimestamp("cost_date"));
-                cost.setCostAmount(resultSet.getBigDecimal("cost_amount"));
-                cost.setCostDescription(resultSet.getString("cost_description"));
-            }
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-        return cost;
-    }
-
-    @Override
-    public List<Cost> findAll() {
-        List<Cost> costs = new ArrayList<>();
-        try (Connection connection = dataSource.getConnection();
-                PreparedStatement statement = connection.prepareStatement("SELECT * FROM costs")) {
-            ResultSet resultSet = statement.executeQuery();
-            while (resultSet.next()) {
-                Cost cost = new Cost();
-                cost.setCostId(resultSet.getLong("cost_id"));
-                cost.setUser(new UserDAO().findById(resultSet.getLong("user_id")));
-                cost.setCostCategory(
-                        new CostCategoryDAO().findById(resultSet.getLong("cost_category_id")));
-                cost.setBudget(new BudgetDAO().findById(resultSet.getLong("budget_id")));
-                cost.setTransaction(
-                        new TransactionDAO().findById(resultSet.getLong("transaction_id")));
-                cost.setCostDate(resultSet.getTimestamp("cost_date"));
-                cost.setCostAmount(resultSet.getBigDecimal("cost_amount"));
-                cost.setCostDescription(resultSet.getString("cost_description"));
-                costs.add(cost);
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
-        return costs;
-    }
-
-    @Override
-    public void save(Cost cost) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "INSERT INTO costs (user_id, cost_category_id,"
-                                                + " budget_id, transaction_id, cost_date,"
-                                                + " cost_amount, cost_description) VALUES (?, ?, ?,"
-                                                + " ?, ?, ?, ?)")) {
-                        statement.setLong(1, cost.getUser().getUserId());
-                        statement.setLong(2, cost.getCostCategory().getCostCategoryId());
-                        statement.setLong(3, cost.getBudget().getBudgetId());
-                        statement.setLong(4, cost.getTransaction().getTransactionId());
-                        statement.setTimestamp(5, cost.getCostDate());
-                        statement.setBigDecimal(6, cost.getCostAmount());
-                        statement.setString(7, cost.getCostDescription());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void update(Cost cost) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "UPDATE costs SET user_id= ?, cost_category_id = ?,"
-                                                + " budget_id = ?, transaction_id = ?, cost_date ="
-                                                + " ?, cost_amount = ?, cost_description = ? WHERE"
-                                                + " cost_id = ?")) {
-                        statement.setLong(1, cost.getUser().getUserId());
-                        statement.setLong(2, cost.getCostCategory().getCostCategoryId());
-                        statement.setLong(3, cost.getBudget().getBudgetId());
-                        statement.setLong(4, cost.getTransaction().getTransactionId());
-                        statement.setTimestamp(5, cost.getCostDate());
-                        statement.setBigDecimal(6, cost.getCostAmount());
-                        statement.setString(7, cost.getCostDescription());
-                        statement.setLong(8, cost.getCostId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    @Override
-    public void delete(Cost cost) {
-        executeWithTransaction(
-                () -> {
-                    try (Connection connection = dataSource.getConnection();
-                            PreparedStatement statement =
-                                    connection.prepareStatement(
-                                            "DELETE FROM costs WHERE cost_id = ?")) {
-                        statement.setLong(1, cost.getCostId());
-                        statement.executeUpdate();
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-}
Index: src/main/resources/db/migration/V1__seed_data.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/db/migration/V1__seed_data.sql b/src/main/resources/db/migration/V1__seed_data.sql
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/db/migration/V1__seed_data.sql	
@@ -0,0 +1,24 @@
+-- таблиця користувачів
+DO
+$$
+    BEGIN
+        IF NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tables WHERE tablename = 'users' AND schemaname = 'public') THEN
+            CREATE TABLE users
+            (
+                user_id       SERIAL PRIMARY KEY,
+                 first_name    VARCHAR(50)                         NOT NULL,
+                last_name     VARCHAR(50)                         NOT NULL,
+                email         VARCHAR(100) UNIQUE                 NOT NULL,
+                password_hash VARCHAR(100)                        NOT NULL,-- зберігати хеш пароля замість самого пароля
+                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+                user_status   VARCHAR(20)                         NOT NULL,
+                CONSTRAINT chk_user_status CHECK (user_status IN ('active', 'inactive', 'admin')) -- додати обмеження на значення user_status
+            );
+        ELSE
+            RAISE NOTICE 'Table users already exists';
+        END IF;
+    END
+$$;
+
+
+
Index: .idea/sqldialects.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sqldialects.xml b/.idea/sqldialects.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/sqldialects.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="SqlDialectMappings">
+    <file url="file://$PROJECT_DIR$/src/main/resources/db/migration/V1__seed_data.sql" dialect="PostgreSQL" />
+  </component>
+</project>
\ No newline at end of file
